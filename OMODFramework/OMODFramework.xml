<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OMODFramework</name>
    </assembly>
    <members>
        <member name="T:OMODFramework.CompressionType">
            <summary>
            CompressionType enum for the OMOD
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionType.SevenZip">
            <summary>
            LZMA
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionType.Zip">
            <summary>
            Zip
            </summary>
        </member>
        <member name="T:OMODFramework.CompressionLevel">
            <summary>
            Level of compression. 
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.VeryHigh">
            <summary>
            SevenZip: 1 left shift 26 dictionary size
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.High">
            <summary>
            SevenZip: 1 left shift 25 dictionary size
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.Medium">
            <summary>
            SevenZip: 1 left shift 23 dictionary size
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.Low">
            <summary>
            SevenZip: 1 left shift 21 dictionary size
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.VeryLow">
            <summary>
            SevenZip: 1 left shift 19 dictionary size
            </summary>
        </member>
        <member name="F:OMODFramework.CompressionLevel.None">
            <summary>
            SevenZip: 0 dictionary size
            </summary>
        </member>
        <member name="T:OMODFramework.ICodeProgress">
            <summary>
            Progress Reporter interface for compression and decompression of SevenZip archives
            </summary>
        </member>
        <member name="M:OMODFramework.ICodeProgress.Init(System.Int64,System.Boolean)">
            <summary>
            Init function that is called before compression/decompression starts. Return
            whether or not this progress reporter should be used.
            </summary>
            <param name="totalSize">Total size to be compressed/decompressed</param>
            <param name="compressing">Whether we are compression or decompression</param>
            <returns></returns>
        </member>
        <member name="T:OMODFramework.CRC32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="P:OMODFramework.CRC32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:OMODFramework.CRC32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:OMODFramework.CRC32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bVal.
            </summary>
            <param name="bVal">The byte is taken as the lower 8 bits of bVal.</param>
        </member>
        <member name="M:OMODFramework.CRC32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes takes from the array.
            </summary>
            <param name="buffer">Buffer containing the data.</param>
        </member>
        <member name="M:OMODFramework.CRC32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name="buffer">Buffer containing the data.</param>
            <param name="offset">Offset in the buffer where the data starts.</param>
            <param name="length">Length of the data.</param>
        </member>
        <member name="T:OMODFramework.Exceptions.OMODInvalidConfigException">
            <summary>
            The Exception that is thrown when the parsed config of an OMOD is not valid
            </summary>
        </member>
        <member name="T:OMODFramework.Exceptions.ZipFileIntegrityException">
            <summary>
            The Exception that is thrown when the archive test for a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> failed
            </summary>
        </member>
        <member name="T:OMODFramework.Exceptions.ZipFileEntryNotFoundException">
            <summary>
            The Exception that is thrown when an entry was not found in a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>
            </summary>
        </member>
        <member name="T:OMODFramework.Exceptions.ZipFileExtractionException">
            <summary>
            The Exception that is thrown when a file could not be extracted from a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>
            </summary>
        </member>
        <member name="M:OMODFramework.OMOD.HasFile(OMODFramework.OMODEntryFileType)">
            <summary>
            Check if the OMOD contains the provided <see cref="T:OMODFramework.OMODEntryFileType"/>.
            </summary>
            <param name="entryFileType">File to look for</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.OMOD.GetEntryFileStream(OMODFramework.OMODEntryFileType)">
            <summary>
            Returns the decompressed Stream of a <see cref="T:OMODFramework.OMODEntryFileType"/> from the OMOD.
            Use <see cref="M:OMODFramework.OMOD.HasFile(OMODFramework.OMODEntryFileType)"/> before doing this to ensure you don't get a <see cref="T:OMODFramework.Exceptions.ZipFileEntryNotFoundException"/>
            </summary>
            <param name="entryFileType">File to extract</param>
            <returns></returns>
            <exception cref="T:OMODFramework.Exceptions.ZipFileEntryNotFoundException">Thrown when the OMOD does not contain the provided <see cref="T:OMODFramework.OMODEntryFileType"/></exception>
        </member>
        <member name="M:OMODFramework.OMOD.GetReadme">
            <summary>
            Returns the Readme.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.OMOD.GetScript(System.Boolean)">
            <summary>
            Returns the Script
            </summary>
            <param name="removeType">Whether to remove the script type identifier from the string.</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.OMOD.GetImage">
            <summary>
            Returns the Image of the OMOD or null if it does not have one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.OMOD.Dispose">
            <inheritdoc /> 
        </member>
        <member name="P:OMODFramework.OMODConfig.Name">
            <summary>
            Name of the OMOD
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.Version">
            <summary>
            Version of the OMOD
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.Description">
            <summary>
            Description of the OMOD, can be empty
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.Email">
            <summary>
            Email of the author, can be empty
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.Website">
            <summary>
            Website of the OMOD, can be empty
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.Author">
            <summary>
            Author of the OMOD, can be empty
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.CreationTime">
            <summary>
            <see cref="T:System.DateTime"/> of the creation
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.FileVersion">
            <summary>
            File Version which is checked against <see cref="F:OMODFramework.FrameworkSettings.CurrentOMODVersion"/>
            </summary>
        </member>
        <member name="P:OMODFramework.OMODConfig.CompressionType">
            <summary>
            <see cref="P:OMODFramework.OMODConfig.CompressionType"/> of the OMOD
            </summary>
        </member>
        <member name="F:OMODFramework.ScriptType.OBMMScript">
            <summary>
            Classic OBMMScript, see (http://timeslip.chorrol.com/obmmm/functionlist.htm)
            </summary>
        </member>
        <member name="F:OMODFramework.ScriptType.Python">
            <summary>
            Python using IronPython (not supported)
            </summary>
        </member>
        <member name="F:OMODFramework.ScriptType.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:OMODFramework.ScriptType.VB">
            <summary>
            Visual Basic (not supported)
            </summary>
        </member>
        <member name="T:OMODFramework.OMODCreationFile">
            <summary>
            Struct for data and plugin files in <see cref="T:OMODFramework.OMODCreationOptions"/>
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.Readme">
            <summary>
            Optional, Readme or path to Readme.
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.Script">
            <summary>
            Optional, Script or path to Script.
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.ScriptType">
            <summary>
            Required when <see cref="P:OMODFramework.OMODCreationOptions.Script"/> is not null.
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.ImagePath">
            <summary>
            Optional, path to Image if you don't want to use <see cref="P:OMODFramework.OMODCreationOptions.Image"/>. <see cref="P:OMODFramework.OMODCreationOptions.Image"/> must be null!
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.Image">
            <summary>
            Optional, Image if you don't want to use <see cref="P:OMODFramework.OMODCreationOptions.ImagePath"/>. <see cref="P:OMODFramework.OMODCreationOptions.ImagePath"/> must be null!
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.OMODCompressionLevel">
            <summary>
            Level of compression used for the .omod file. Must not be <see cref="F:OMODFramework.CompressionLevel.None"/>.
            </summary>
        </member>
        <member name="P:OMODFramework.OMODCreationOptions.DataCompressionLevel">
            <summary>
            Level of compression used for the data and plugin files. Must not be <see cref="F:OMODFramework.CompressionLevel.None"/>.
            </summary>
        </member>
        <member name="F:OMODFramework.OMODCreationOptions.DataFiles">
            <summary>
            Required, HashSet of all Data Files. Use <see cref="M:System.Collections.Generic.HashSet`1.Add(`0)"/> to add the files you want to use. Make sure you check the return value of <see cref="M:System.Collections.Generic.HashSet`1.Add(`0)"/>!
            </summary>
        </member>
        <member name="F:OMODFramework.OMODCreationOptions.PluginFiles">
            <summary>
            Optional, HashSet of all Plugin Files. Use <see cref="M:System.Collections.Generic.HashSet`1.Add(`0)"/> to add the files you want to use. Make sure you check the return value of <see cref="M:System.Collections.Generic.HashSet`1.Add(`0)"/>!
            </summary>
        </member>
        <member name="M:OMODFramework.OMODFile.ExtractFiles(System.Boolean,System.String)">
            <summary>
            Extracts all Data/Plugin files using a single Thread.
            </summary>
            <param name="data">Whether to extract data or plugin files.</param>
            <param name="output">Output directory.</param>
        </member>
        <member name="M:OMODFramework.OMODFile.ExtractFilesParallel(System.Boolean,System.String,System.Byte,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extracts the Data/Plugin Files in parallel using Split Memory Streams.
            </summary>
            <param name="data">Whether to extract Data or Plugin files.</param>
            <param name="output">Output directory.</param>
            <param name="numStreams">Number of Streams to use.</param>
            <param name="degreeOfParallelism">Specifies the maximum number of processors that PLINQ should use to parallelize the query. See https://docs.microsoft.com/en-us/dotnet/api/system.linq.parallelenumerable.withdegreeofparallelism?view=netcore-3.1 for more info.</param>
            <param name="token">Cancellation Token to cancel the execution if requested.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OMODFramework.Utils.HasFile(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.Boolean)">
            <summary>
            Checks if the given <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> contains a file
            </summary>
            <param name="zipFile">The ZipFile</param>
            <param name="file">The file to find</param>
            <param name="ignoreCase">Whether to ignore case or not</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Utils.CheckIntegrity(ICSharpCode.SharpZipLib.Zip.ZipFile,System.Boolean)">
            <summary>
            Tests the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> for integrity
            </summary>
            <param name="file">The ZipFile to test</param>
            <param name="throwIfNotValid">Whether to throw a <see cref="T:OMODFramework.Exceptions.ZipFileIntegrityException"/> if the archive is not valid</param>
            <returns></returns>
            <exception cref="T:OMODFramework.Exceptions.ZipFileIntegrityException"></exception>
        </member>
        <member name="M:OMODFramework.Utils.ExtractFile(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String)">
            <summary>
            Extracts a file from <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> and returns a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="file">The archive</param>
            <param name="name">The file to extract</param>
            <returns></returns>
            <exception cref="T:OMODFramework.Exceptions.ZipFileEntryNotFoundException"></exception>
        </member>
    </members>
</doc>
