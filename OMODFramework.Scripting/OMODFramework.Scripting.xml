<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OMODFramework.Scripting</name>
    </assembly>
    <members>
        <member name="T:OMODFramework.Scripting.ScriptException">
            <summary>
            Thrown during script execution
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ScriptingFatalErrorException">
            <summary>
            Thrown when FatalError was triggered
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ScriptingCanceledException">
            <summary>
            Thrown when script execution was canceled
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.DialogResult">
            <summary>
            Results for Dialogs
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.DialogResult.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.DialogResult.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.DialogResult.Canceled">
            <summary>
            Canceled, this will throw <see cref="T:OMODFramework.Scripting.ScriptingCanceledException"/>
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ESP">
            <summary>
            ESP/ESM/Plugin struct
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ESP.Name">
            <summary>
            Name of the plugin without extension
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ESP.Active">
            <summary>
            Whether the plugin is active or not
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ScriptSettings">
            <summary>
            Settings for Script Execution
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ScriptSettings.FrameworkSettings">
            <summary>
            Framework Settings
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ScriptSettings.ScriptFunctions">
            <summary>
            Script Functions
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ScriptSettings.#ctor(OMODFramework.Scripting.IScriptFunctions,OMODFramework.FrameworkSettings)">
            <summary>
            Initializes a new <see cref="T:OMODFramework.Scripting.ScriptSettings"/> object
            </summary>
            <param name="scriptFunctions">The functions to use</param>
            <param name="frameworkSettings">The Framework settings to use. Default settings will be used if this is null.</param>
        </member>
        <member name="T:OMODFramework.Scripting.IScriptFunctions">
            <summary>
            Scripts Functions that you have to implement
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.Message(System.String)">
            <summary>
            Message for the user
            </summary>
            <param name="msg">Message to be displayed</param>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.Message(System.String,System.String)">
            <summary>
            Message for the user
            </summary>
            <param name="msg">Message to be displayed</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.Select(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Drawing.Bitmap},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Let the user select one or multiple items from an enumerable of items.
            </summary>
            <param name="items">Enumerable of all items to select from</param>
            <param name="title">Title of the window</param>
            <param name="isMultiSelect">Whether the user can select one or multiple items</param>
            <param name="previews">Enumerable containing <see cref="T:System.Drawing.Bitmap"/> previews. Can be empty! Preview for items[i] is previews[i].</param>
            <param name="descriptions">Enumerable containing descriptions of the items. Can be empty! Description for items[i] is descriptions[i]</param>
            <returns>Enumerable with the indices of the selected items.</returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.InputString(System.String,System.String)">
            <summary>
            Let the user input a string
            </summary>
            <param name="title">Title of the window (can be null)</param>
            <param name="initialText">Initial text (can be null)</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.DialogYesNo(System.String)">
            <summary>
            Yes, No dialog prompt
            </summary>
            <param name="title">Title of the window</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.DialogYesNo(System.String,System.String)">
            <summary>
            Yes, No dialog prompt
            </summary>
            <param name="title">Title of the window</param>
            <param name="message">Message ot be displayed</param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.DisplayImage(System.Drawing.Bitmap,System.String)">
            <summary>
            Display an image
            </summary>
            <param name="image"><see cref="T:System.Drawing.Bitmap"/> of the image. Make sure you dispose of it!</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.DisplayText(System.String,System.String)">
            <summary>
            Display text to the user
            </summary>
            <param name="text">Text to be displayed</param>
            <param name="title">Title of the window (can be null)</param>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.HasScriptExtender">
            <summary>
            Check if the Oblivion Script Extender is installed or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.HasGraphicsExtender">
            <summary>
            Check if the Oblivion Graphics Extender is installed or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.ScriptExtenderVersion">
            <summary>
            Get the <see cref="T:System.Version"/> of the Oblivion Script Extender
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.GraphicsExtenderVersion">
            <summary>
            Get the <see cref="T:System.Version"/> of the Oblivion Graphics Extender
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.OblivionVersion">
            <summary>
            Get the <see cref="T:System.Version"/> of the Oblivion executable
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.OBSEPluginVersion(System.String)">
            <summary>
            Get the <see cref="T:System.Version"/> of an Oblivion Script Extender Plugin inside the
            <c>data\obse\plugin</c> folder.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.GetESPs">
            <summary>
            Get an enumerable of all Plugins, active and non-active
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.IScriptFunctions.GetActiveOMODNames">
            <summary>
            Get an enumerable of the names of all active OMODs
            </summary>
            <returns></returns>
        </member>
        <member name="T:OMODFramework.Scripting.ScriptReturnFile">
            <summary>
            Script Return File
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ScriptReturnFile.OriginalFile">
            <summary>
            Original Entry
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnFile.Output">
            <summary>
            Output path
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ScriptReturnFile.ToString">
            <inheritdoc />
        </member>
        <member name="M:OMODFramework.Scripting.ScriptReturnFile.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OMODFramework.Scripting.ScriptReturnFile.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.DataFile">
            <summary>
            A Data File
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.PluginFile">
            <summary>
            A Plugin File
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PluginFile.IsUnchecked">
            <summary>
            Whether the file is unchecked or not
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PluginFile.Warning">
            <summary>
            (Can be null) Warning
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PluginFile.LoadEarly">
            <summary>
            Whether to load the plugin early
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PluginFile.LoadBefore">
            <summary>
            Plugins that should be loaded after the current plugin
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PluginFile.LoadAfter">
            <summary>
            Plugins that should be loaded before the current plugin
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ConflictType">
            <summary>
            Conflict Types for <see cref="T:OMODFramework.Scripting.ConflictData"/>
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ConflictType.Conflicts">
            <summary>
            Conflict with another file
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ConflictType.Depends">
            <summary>
            Depends on another file
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ConflictData">
            <summary>
            Conflict Data class
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.Type">
            <summary>
            Type of Conflict
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.Level">
            <summary>
            Level of the Conflict
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.File">
            <summary>
            File that the current OMOD conflicts with/depends on
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.MinVersion">
            <summary>
            Conflict is only viable if the <see cref="P:OMODFramework.Scripting.ConflictData.File"/> has this minimum version
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.MaxVersion">
            <summary>
            Conflict is only viable if the <see cref="P:OMODFramework.Scripting.ConflictData.File"/> has this maximum version
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.Comment">
            <summary>
            (Can be null) Comment
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ConflictData.Partial">
            <summary>
            Whether <see cref="P:OMODFramework.Scripting.ConflictData.File"/> is a regex
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ConflictData.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.AEdit">
            <summary>
            Abstract class for Edits
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.AFileEdit">
            <summary>
            Abstract class for File Edits
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.AFileEdit.File">
            <summary>
            The File to edit
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.AFileEdit.ExecuteEdit(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            Execute the Edit
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="safeEdit"></param>
        </member>
        <member name="M:OMODFramework.Scripting.AFileEdit.GetBytesFromFile(System.Byte[]@)">
            <summary>
            Extracts <see cref="P:OMODFramework.Scripting.AFileEdit.File"/> and reads the the data into the provided buffer. You should
            use <see cref="F:OMODFramework.OMODCompressedEntry.Length"/> to get the length of the file. This function
            is supposed to be used if you want to execute the edit yourself.
            </summary>
            <param name="buffer">The buffer</param>
            <exception cref="T:System.ArgumentException">When the length of the provided buffer does not equal the length the file</exception>
        </member>
        <member name="T:OMODFramework.Scripting.INIEditInfo">
            <summary>
            INI Edit Info
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.INIEditInfo.Section">
            <summary>
            Section in the INI
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.INIEditInfo.Name">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.INIEditInfo.NewValue">
            <summary>
            New Value
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.INIEditInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.SDPEditInfo">
            <summary>
            Shader package edits
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SDPEditInfo.Package">
            <summary>
            Shader package number, between 1 and 19
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SDPEditInfo.Shader">
            <summary>
            Name of the shader
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.SDPEditInfo.File">
            <summary>
            The file containing the replacement data for the shader
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.SDPEditInfo.ExecuteEdit(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            <para>Use this function if you don't have code for dealing with shader edits.</para>
            <para>
            This function reads the provided shader file and replaces the shader inside of it. Use the
            <paramref name="safeEdit"/> parameter if you don't want the original file to be changed.
            If <paramref name="safeEdit"/> is set to true, you also have to provide an <paramref name="outputFile"/>
            where the final shader file will go to.
            </para>
            </summary>
            <param name="inputFile">The Shader file to replace. Do note that this has to match shaderpackage{ID}.sdp where ID is <see cref="F:OMODFramework.Scripting.SDPEditInfo.Package"/> with a PadLeft of 3. Meaning that Package 1 becomes 001 and package 18 becomes 018.</param>
            <param name="outputFile">The output file, only needed if <paramref name="safeEdit"/> is set to true</param>
            <param name="safeEdit">Whether to use export the final shader file to <paramref name="outputFile"/></param>
        </member>
        <member name="T:OMODFramework.Scripting.PatchInfo">
            <summary>
            Class containing information about Patches to be made
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.PatchInfo.FileToPatch">
            <summary>
            The file to patch
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.PatchInfo.Create">
            <summary>
            Whether the file at <see cref="F:OMODFramework.Scripting.PatchInfo.FileToPatch"/> should be created if it does not exist
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.PatchInfo.File">
            <summary>
            The file to replace <see cref="F:OMODFramework.Scripting.PatchInfo.FileToPatch"/> with
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.PatchInfo.ExecuteEdit(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            <para>Use this function if you don't have code for dealing with Plugin/Data File patches.</para>
            <para>
            This function extracts <see cref="P:OMODFramework.Scripting.PatchInfo.File"/> and replaces <paramref name="fileToPatch"/>. You can
            use the <paramref name="safePatch"/> parameter if you don't want <paramref name="fileToPatch"/> to be
            replaced. If <paramref name="safePatch"/> is set, you also need to provide a <paramref name="outputFile"/>.
            Instead of replacing <paramref name="fileToPatch"/>, the data of <see cref="P:OMODFramework.Scripting.PatchInfo.File"/> will be written to
            <paramref name="outputFile"/> instead.
            </para>
            </summary>
            <param name="fileToPatch">File to patch, use <see cref="F:OMODFramework.Scripting.PatchInfo.FileToPatch"/> to get the path to the file inside the data folder.</param>
            <param name="outputFile">Output File, only needed if <paramref name="safePatch"/> is set to true</param>
            <param name="safePatch">Whether to replaces <paramref name="outputFile"/> instead of <paramref name="fileToPatch"/></param>
        </member>
        <member name="M:OMODFramework.Scripting.PatchInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.SetPluginInfoType">
            <summary>
            Type of the data in <see cref="T:OMODFramework.Scripting.SetPluginInfo"/>
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfoType.Byte">
            <summary>
            Byte (1 byte... duh)
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfoType.Short">
            <summary>
            Short (2 bytes)
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfoType.Int">
            <summary>
            Int (4 bytes)
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfoType.Long">
            <summary>
            Long (8 bytes)
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfoType.Float">
            <summary>
            Float (4 bytes)
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.SetPluginInfo">
            <summary>
            Class for plugin changes
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfo.Type">
            <summary>
            Type of the data in <see cref="F:OMODFramework.Scripting.SetPluginInfo.Value"/>
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfo.Value">
            <summary>
            The data to replace in the plugin
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.SetPluginInfo.Offset">
            <summary>
            Offset of the data to replace
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.SetPluginInfo.File">
            <summary>
            The Plugin to modify
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.SetPluginInfo.GetValueLength">
            <summary>
            Returns the amount of bytes to be written, depending on the <see cref="F:OMODFramework.Scripting.SetPluginInfo.Type"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:OMODFramework.Scripting.SetPluginInfo.ExecuteEdit(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            This function will open the file at <paramref name="inputFile"/> and will change the value at <see cref="F:OMODFramework.Scripting.SetPluginInfo.Offset"/>
            with <see cref="F:OMODFramework.Scripting.SetPluginInfo.Value"/> of type <see cref="F:OMODFramework.Scripting.SetPluginInfo.Type"/>. If you have not extracted the plugin yet, make sure that
            <paramref name="inputFile"/> equals <paramref name="outputFile"/>. If you have extracted the plugin and don't want
            to modify <paramref name="inputFile"/>, set <paramref name="safeEdit"/> to true and change the <paramref name="outputFile"/>.
            </summary>
            <param name="inputFile">The plugin file if you have already extracted it</param>
            <param name="outputFile">If <paramref name="safeEdit"/> is set to true, this fill will be changed instead of <paramref name="inputFile"/></param>
            <param name="safeEdit">Whether to change <paramref name="outputFile"/> or <paramref name="inputFile"/></param>
        </member>
        <member name="M:OMODFramework.Scripting.SetPluginInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.ESPEditInfo">
            <summary>
            Class holding info about ESP edits to certain records
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ESPEditInfo.IsGMST">
            <summary>
            Whether the edit is for GMST or Global
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ESPEditInfo.File">
            <summary>
            Plugin file to edit
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ESPEditInfo.EDID">
            <summary>
            The EDID of the record
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.ESPEditInfo.Value">
            <summary>
            The Value to change
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ESPEditInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.EditXMLInfo">
            <summary>
            Information about XML edits
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.IsReplace">
            <summary>
            Whether to find and replace
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.IsEditLine">
            <summary>
            Whether to replace a Line
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.Line">
            <summary>
            Only set if <see cref="F:OMODFramework.Scripting.EditXMLInfo.IsEditLine"/> is set to <c>true</c>. Line number
            to replace.
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.Value">
            <summary>
            Only set if <see cref="F:OMODFramework.Scripting.EditXMLInfo.IsEditLine"/> is set to <c>true</c>. Line replacement.
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.Find">
            <summary>
            Only set if <see cref="F:OMODFramework.Scripting.EditXMLInfo.IsReplace"/> is set to <c>true</c>. String to find.
            </summary>
        </member>
        <member name="F:OMODFramework.Scripting.EditXMLInfo.Replace">
            <summary>
            Only set if <see cref="F:OMODFramework.Scripting.EditXMLInfo.IsReplace"/> is set to <c>true</c>. String to replace <see cref="F:OMODFramework.Scripting.EditXMLInfo.Find"/>with.
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.EditXMLInfo.File">
            <summary>
            The XML file to edit
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.EditXMLInfo.ExecuteEdit(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            This function will edit the XML file at <paramref name="inputFile"/>. If you have not extracted the file yet, make sure that
            <paramref name="inputFile"/> equals <paramref name="outputFile"/>. If you have extracted the plugin and don't want
            to modify <paramref name="inputFile"/>, set <paramref name="safeEdit"/> to true and change the <paramref name="outputFile"/>.
            </summary>
            <param name="inputFile">The XML file if you have already extracted it</param>
            <param name="outputFile">If <paramref name="safeEdit"/> is set to true, this fill will be changed instead of <paramref name="inputFile"/></param>
            <param name="safeEdit">Whether to change <paramref name="outputFile"/> or <paramref name="inputFile"/></param>
        </member>
        <member name="M:OMODFramework.Scripting.EditXMLInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:OMODFramework.Scripting.ScriptReturnData">
            <summary>
            Script Return Data. This class holds information about everything that
            gets returned and modified during script execution.
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.DataFiles">
            <summary>
            Data Files to be installed
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.PluginFiles">
            <summary>
            Plugins to be installed
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.Conflicts">
            <summary>
            Conflicts with other files
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.RegisteredBSAs">
            <summary>
            BSAs to be registered
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.INIEdits">
            <summary>
            INI Edits to be made
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.SDPEditInfos">
            <summary>
            Shader Package Edits to be made
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.Patches">
            <summary>
            List of all Patches to be made
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.SetPluginList">
            <summary>
            List of all <see cref="T:OMODFramework.Scripting.SetPluginInfo"/>s
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.ESPEdits">
            <summary>
            List of all ESP Edits
            </summary>
        </member>
        <member name="P:OMODFramework.Scripting.ScriptReturnData.XMLEdits">
            <summary>
            List of all XML Edits
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ScriptReturnData.ToString">
            <inheritdoc />
        </member>
        <member name="M:OMODFramework.Scripting.OBMMScriptHandler.ReplaceWithVariable(System.String)">
            <summary>
            Utility function for replacing variable placeholders with the actual value
            of the variable from the _variables dictionary
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:OMODFramework.Scripting.OBMMScriptHandler.LineAttribute">
            <summary>
            Utility attribute for <see cref="T:OMODFramework.Scripting.OBMMScriptHandler.TokenType"/>. Used in <see cref="M:OMODFramework.Scripting.OBMMScriptHandler.ValidateLine(OMODFramework.Scripting.OBMMScriptHandler.Line)"/>
            to see if a line has the required amount of arguments.
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.OBMMScriptHandler.TokenType">
            <summary>
            All possible tokens
            </summary>
        </member>
        <member name="T:OMODFramework.Scripting.ScriptRunner">
            <summary>
            Script Runner for executing scripts
            </summary>
        </member>
        <member name="M:OMODFramework.Scripting.ScriptRunner.ExecuteScript(OMODFramework.OMOD,OMODFramework.Scripting.ScriptSettings)">
            <summary>
            Execute the script inside an OMOD
            </summary>
            <param name="omod">OMOD with the script</param>
            <param name="settings">Settings used for Script Execution</param>
            <returns></returns>
        </member>
    </members>
</doc>
